State Definitions and Transitions

S0 – Start State

- On whitespace (space, tab, newline):  
  Stay in S0 (ignore it).
- On letter or underscore (`[a-zA-Z_]`):  
  Go to S1 (the “ID”‐building state).
- On digit (`[0-9]`):  
  Go to S2 (the “integer”‐building state).
- On ‘(’:  
  Go to S3 → (FINAL: `LPAREN_TOKEN`), then back to S0.
- On ‘)’:  
  Go to S4 → (FINAL: `RPAREN_TOKEN`), then back to S0.
- On ‘{’:  
  Go to S5 → (FINAL: `LCURLY_TOKEN`), then back to S0.
- On ‘}’:  
  Go to S6 → (FINAL: `RCURLY_TOKEN`), then back to S0.
- On ‘;’:  
  Go to S7 → (FINAL: `SEMICOLON_TOKEN`), then back to S0.
- On ‘+’:  
  Go to S8 → (FINAL: `PLUS_TOKEN`), then back to S0.
- On ‘-’:  
  Go to S9 → (FINAL: `MINUS_TOKEN`), then back to S0.
- On ‘*’:  
  Go to S10 → (FINAL: `TIMES_TOKEN`), then back to S0.
- On ‘/’:  
  Go to S11 → (FINAL: `DIVIDE_TOKEN`), then back to S0.
- On ‘=’:  
  Go to S12 (could become `ASSIGNMENT_TOKEN` or `EQUAL_TOKEN`).
- On ‘<’:  
  Go to S13 (could become `LESS_TOKEN`, `LESSEQUAL_TOKEN`, or `INSERTION_TOKEN`).
- On ‘>’:  
  Go to S14 (could become `GREATER_TOKEN` or `GREATEREQUAL_TOKEN`).
- On ‘!’:  
  Go to S15 (could become `NOTEQUAL_TOKEN` or `BAD_TOKEN`).
- On EOF:  
  Go to S99 → (FINAL: `ENDFILE_TOKEN`).
- Anything else:  
  Go to S98 → (FINAL: `BAD_TOKEN`).

S1 – Building an Identifier (or Possibly a Keyword)
- On letter/digit/underscore: stay in S1.  
  (You’re building up the identifier.)
- Otherwise:  
  - Accept the string read so far as an identifier, then do a post-check:
    - If it’s `"void"`, token = `VOID_TOKEN`
    - If it’s `"main"`, token = `MAIN_TOKEN`
    - If it’s `"int"`, token = `INT_TOKEN`
    - If it’s `"cout"`, token = `COUT_TOKEN`
    - Else token = `IDENTIFIER_TOKEN`
  - Reprocess the current (non‐ID) character in S0.

S2 – Building an Integer
- On digit: stay in S2.
- Otherwise:
  - Accept the integer read so far → `INTEGER_TOKEN`.
  - Reprocess the current character in S0.

S3 → (FINAL: `LPAREN_TOKEN`)  
Immediately accept `LPAREN_TOKEN` and go back to S0.

S4 → (FINAL: `RPAREN_TOKEN`)  
Immediately accept `RPAREN_TOKEN` and go back to S0.

S5 → (FINAL: `LCURLY_TOKEN`)  
Immediately accept `LCURLY_TOKEN` and go back to S0.

S6 → (FINAL: `RCURLY_TOKEN`)  
Immediately accept `RCURLY_TOKEN` and go back to S0.

S7 → (FINAL: `SEMICOLON_TOKEN`)  
Immediately accept `SEMICOLON_TOKEN` and go back to S0.

S8 → (FINAL: `PLUS_TOKEN`)  
Immediately accept `PLUS_TOKEN` and go back to S0.

S9 → (FINAL: `MINUS_TOKEN`)  
Immediately accept `MINUS_TOKEN` and go back to S0.

S10 → (FINAL: `TIMES_TOKEN`)  
Immediately accept `TIMES_TOKEN` and go back to S0.

S11 → (FINAL: `DIVIDE_TOKEN`)  
Immediately accept `DIVIDE_TOKEN` and go back to S0.

---

S12 – Saw ‘=’, Could Be `ASSIGNMENT_TOKEN` or `EQUAL_TOKEN`
- On next char = ‘=’:  
  Go to S12F → (FINAL: `EQUAL_TOKEN`).  
- Otherwise:  
  - Back up that non‐‘=’ character (i.e. reprocess it in S0),
  - Accept `ASSIGNMENT_TOKEN`.

S12F → (FINAL: `EQUAL_TOKEN`)  
Accept `EQUAL_TOKEN`, return to S0.

---

S13 – Saw ‘<’, Could Be `LESS_TOKEN`, `LESSEQUAL_TOKEN`, or `INSERTION_TOKEN`
- On next char = ‘<’:  
  Go to S13F1 → (FINAL: `INSERTION_TOKEN`)  
- On next char = ‘=’:  
  Go to S13F2 → (FINAL: `LESSEQUAL_TOKEN`)
- Otherwise:  
  - Back up that char (reprocess in S0),
  - Accept `LESS_TOKEN`.

S13F1 → (FINAL: `INSERTION_TOKEN`)
Accept `INSERTION_TOKEN`, return to S0.

S13F2 → (FINAL: `LESSEQUAL_TOKEN`)
Accept `LESSEQUAL_TOKEN`, return to S0.

---

S14 – Saw ‘>’, Could Be `GREATER_TOKEN` or `GREATEREQUAL_TOKEN`
- On next char = ‘=’:
  Go to S14F1 → (FINAL: `GREATEREQUAL_TOKEN`)
- Otherwise:
  - Back up that char,
  - Accept `GREATER_TOKEN`.

S14F1 → (FINAL: `GREATEREQUAL_TOKEN`)
Accept it, return to S0.

---

S15 – Saw ‘!’, Could Be `NOTEQUAL_TOKEN` or `BAD_TOKEN`
- On next char = ‘=’:
  Go to S15F → (FINAL: `NOTEQUAL_TOKEN`)
- Otherwise:
  - Accept `BAD_TOKEN` (since a lone `!` isn’t valid in your token list),
  - Return to S0.

S15F → (FINAL: `NOTEQUAL_TOKEN`)
Accept `NOTEQUAL_TOKEN`, return to S0.

---

S98 → (FINAL: `BAD_TOKEN`)  
Accept `BAD_TOKEN`, return to S0.

S99 → (FINAL: `ENDFILE_TOKEN`)
Accept `ENDFILE_TOKEN`. (Typically the scanner stops here.)

---

How This Tokenizes the Example

When you feed:
```c
void main()
{
  int sum;
  sum = 35 + 400;
  cout << sum;
}
```
into the machine, it visits states in this fashion (roughly):
1. `v -> S1`, `o -> S1`, `i -> S1`, `d -> S1`, then a non‐ID char (whitespace) → accept as an ID, check “void” → `VOID_TOKEN`.
2. `m -> S1`, `a -> S1`, `i -> S1`, `n -> S1`, then `(` → accept as ID, check “main” → `MAIN_TOKEN`.
3. `(` → S3 → (FINAL: `LPAREN_TOKEN`).
4. `)` → S4 → (FINAL: `RPAREN_TOKEN`).
5. `{` → S5 → (FINAL: `LCURLY_TOKEN`).
6. `i -> S1`, `n -> S1`, `t -> S1`, whitespace → accept “int” → `INT_TOKEN`.
7. `s -> S1`, `u -> S1`, `m -> S1`, `;` → accept “sum” → `IDENTIFIER_TOKEN`.
8. `;` → S7 → (FINAL: `SEMICOLON_TOKEN`).
9. `s -> S1`, `u -> S1`, `m -> S1`, whitespace → accept “sum” → `IDENTIFIER_TOKEN`.
10. `=` → S12, next char is whitespace or something else → accept `ASSIGNMENT_TOKEN`.
11. `3 -> S2`, `5 -> S2`, whitespace → accept “35” → `INTEGER_TOKEN`.
12. `+` → S8 → (FINAL: `PLUS_TOKEN`).
13. `4 -> S2`, `0 -> S2`, `0 -> S2`, `;` → accept “400” → `INTEGER_TOKEN`.
14. `;` → S7 → (FINAL: `SEMICOLON_TOKEN`).
15. `c -> S1`, `o -> S1`, `u -> S1`, `t -> S1`, whitespace → accept “cout” → `COUT_TOKEN`.
16. `<` → S13, next char `<` → S13F1 → (FINAL: `INSERTION_TOKEN`).
17. `s -> S1`, `u -> S1`, `m -> S1`, `;` → accept “sum” → `IDENTIFIER_TOKEN`.
18. `;` → S7 → (FINAL: `SEMICOLON_TOKEN`).
19. `}` → S6 → (FINAL: `RCURLY_TOKEN`).
20. EOF → S99 → (FINAL: `ENDFILE_TOKEN`).