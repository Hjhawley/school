Breadth-First Search (BFS) Implementation

Global Initialization: Mark all vertices as 'undiscovered'.
BFS(s):
1. Mark s as 'discovered'.
2. Initialize the queue: {s}.
3. While the queue is not empty:
    - Remove the first vertex u from the queue.
    - For each edge {u, x}:
        - If x is 'undiscovered':
            - Mark x as 'discovered'.
            - Append x to the queue.
    - Mark u as 'fully explored'.

BFS guarantees finding the shortest path in an unweighted graph.

* * * * * * * * * * * * * * * * * * * *

Depth-First Search (DFS) Implementation

Global Initialization: Mark all vertices as 'undiscovered'.
DFS(v):
1. Mark v as 'discovered'.
2. Add v to the stack.
3. For each edge {v, x}:
    - If x is 'undiscovered':
        - Recursively call DFS(x).
4. Mark v as 'fully explored'.

DFS does not guarantee finding the shortest path.

* * * * * * * * * * * * * * * * * * * *

Applications of Graph Traversal: Bipartiteness Testing
An undirected graph G is bipartite if and only if we can color its 
vertices red and green, such that every edge connects vertices of 
different colors.

Determining Bipartiteness
Input: Undirected graph G.  
Goal: Output a valid 2-coloring if G is bipartite; otherwise, 
output "False" (not bipartite).

A graph containing an odd-length cycle is not bipartite.
On a cycle, colors must alternate:
    - Assign green to every *2nd vertex*.
    - Assign red to every *other vertex*.
    - This alternation fails if the cycle length is odd.

Algorithm:
1. Assume G is connected (otherwise, run the algorithm on each 
component separately).
2. Start coloring nodes from a given source node s:
    - Color s red.
    - Color all neighbors of s green.
    - Color their neighbors red, and so on.
3. If a node x is already colored:
    - If it matches the intended color → ignore it.
    - If it conflicts → output "False" (not bipartite) and halt.

Using BFS for Bipartiteness Testing
Run BFS, assigning all vertices in layer L_i the color i % 2:
    - Red for even layers.
    - Green for odd layers.
If no edge connects two vertices of the same color → G is bipartite.
Otherwise, if a bad edge is found → output "False" (not bipartite).

Why is BFS Correct for Bipartiteness Testing?
BFS layers partition the graph into levels.
All edges connect vertices in adjacent or same-level layers.
A bad edge would connect two vertices in the same layer.
If such an edge exists, the graph must contain an odd-length cycle, 
proving it is not bipartite.

* * * * * * * * * * * * * * * * * * * *

Strongly Connected Components (SCCs) in Directed Graphs
Two vertices u and v are "strongly connected" if they belong to a 
directed cycle. This means there is a path from u to v and a path 
from v to u.

Any directed graph can be partitioned into SCCs such that:
  1. All pairs of vertices within the same SCC are strongly connected.
  2. No two SCCs can be merged while maintaining the strong connectivity property.

SCCs can be efficiently stored, similar to connected components in 
undirected graphs (e.g., using an array A[u] to track component membership).
SCCs can be found using an extended DFS algorithm in O(n + m) time, where:
    - n = number of vertices.
    - m = number of edges.
This efficiency is achieved using extra bookkeeping techniques.