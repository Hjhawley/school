syntax = "proto3";

package chord;

option go_package = "chord/protocol";

service Chord {
  rpc Ping(PingRequest) returns (PingResponse) {}

  rpc Put(PutRequest) returns (PutResponse) {}
  rpc Get(GetRequest) returns (GetResponse) {}
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
  rpc GetAll(GetAllRequest) returns (GetAllResponse) {}

  rpc PutAll(PutAllRequest) returns (PutAllResponse) {}
  rpc GetSome(GetSomeRequest) returns (GetSomeResponse) {}

  rpc Notify(NotifyRequest) returns (NotifyResponse) {}
  rpc GetPredecessorAndSuccessors(GetPredecessorAndSuccessorsRequest) returns (GetPredecessorAndSuccessorsResponse) {}

  rpc FindSuccessor(FindSuccessorRequest) returns (FindSuccessorResponse) {}
}

message PingRequest {}
message PingResponse {}

message PutRequest {
  string key = 1;
  string value = 2;
}
message PutResponse {}

message GetRequest {
  string key = 1;
}
message GetResponse {
  string value = 1;
}

message DeleteRequest {
  string key = 1;
}
message DeleteResponse {}

message GetAllRequest {}
message GetAllResponse {
  map<string, string> key_values = 1;
}

message PutAllRequest {
  map<string, string> key_values = 1;
}
message PutAllResponse {}

message GetSomeRequest {
  string address = 1;
}
message GetSomeResponse {
  map<string, string> key_values = 1;
}

message NotifyRequest {
  string address = 1;
}
message NotifyResponse {}

message GetPredecessorAndSuccessorsRequest {}
message GetPredecessorAndSuccessorsResponse {
  string predecessor = 1;
  repeated string successors = 2;
}

message FindSuccessorRequest {
  bytes id = 1;  // SHA-1 hash as bytes
}
message FindSuccessorResponse {
  bool found = 1;
  string next_address = 2;
}
