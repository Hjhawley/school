syntax = "proto3";

package chord;

option go_package = "chord/protocol";

// The Chord service definition
service Chord {
  rpc Ping(PingRequest) returns (PingResponse) {}

  rpc Put(PutRequest) returns (PutResponse) {}

  rpc Get(GetRequest) returns (GetResponse) {}

  rpc Delete(DeleteRequest) returns (DeleteResponse) {}

  rpc GetAll(GetAllRequest) returns (GetAllResponse) {}

  rpc Notify(NotifyRequest) returns (NotifyResponse) {}

  rpc GetPredecessorAndSuccessors(GetPredecessorAndSuccessorsRequest) returns (GetPredecessorAndSuccessorsResponse) {}

  rpc FindSuccessor(FindSuccessorRequest) returns (FindSuccessorResponse) {}
}

message PingRequest {}

message PingResponse {}

message PutRequest {
  string key = 1;
  string value = 2;
}

message PutResponse {}

message GetRequest {
  string key = 1;
}

message GetResponse {
  string value = 1;
}

message DeleteRequest {
  string key = 1;
}

message DeleteResponse {}

message GetAllRequest {}

message GetAllResponse {
  map<string, string> key_values = 1;
}

message NotifyRequest {
  string address = 1;
}

message NotifyResponse {}

message GetPredecessorAndSuccessorsRequest {}

message GetPredecessorAndSuccessorsResponse {
  string predecessor = 1;
  repeated string successors = 2;
}

message FindSuccessorRequest {
  string id = 1;
}

message FindSuccessorResponse {
  string address = 1;
}
